digraph _logic_property {
rankdir=LR;
node [shape = circle]; S0 S1 S3 S4 S6 S7 S8 S9 S10 S12 S13 S15 S16 S17 S18 S19 S2 S5 S11 S14 S20 S21 S22 S23 bad start;
node [shape = point]; _s_s;
_s_s -> start;
S3 -> S20 [ label = "(1) evt_needPass_cH\\needs "];
S3 -> bad [ label = "(2) evt_anySymbol_cH\\authenticated && needs "];
S4 -> S10 [ label = "(1) evt_pass_cH"];
S4 -> bad [ label = "(2) evt_anySymbol_cH\\authenticated && needs "];
S6 -> S7 [ label = "(1) evt_onConnected_cH"];
S6 -> bad [ label = "(2) evt_anySymbol_cH\\authenticated && needs "];
S7 -> S8 [ label = "(1) evt_needUser_cH\\needs "];
S7 -> bad [ label = "(2) evt_anySymbol_cH\\authenticated && needs "];
S8 -> S10 [ label = "(1) evt_user_cH"];
S8 -> bad [ label = "(2) evt_anySymbol_cH\\authenticated && needs "];
S9 -> S10 [ label = "(1) evt_onConnected_cH"];
S9 -> bad [ label = "(2) evt_anySymbol_cH\\authenticated && needs "];
start -> S0 [ label = "(1) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" start_to_S0 \" ) "];
start -> S5 [ label = "(2) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" start_to_S5 \" ) "];
start -> S4 [ label = "(3) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S2_to_S4 \" ) "];
start -> S6 [ label = "(4) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S5_to_S6 \" ) "];
start -> S9 [ label = "(5) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S5_to_S9 \" ) "];
start -> S12 [ label = "(6) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S11_to_S12 \" ) "];
start -> S14 [ label = "(7) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S11_to_S14 \" ) "];
start -> S19 [ label = "(8) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S11_to_S19 \" ) "];
start -> S15 [ label = "(9) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S14_to_S15 \" ) "];
start -> S17 [ label = "(10) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S14_to_S17 \" ) "];
start -> S2 [ label = "(11) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S20_to_S2 \" ) "];
start -> S4 [ label = "(12) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S20_to_S4 \" ) "];
start -> S13 [ label = "(13) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S21_to_S13 \" ) "];
start -> S11 [ label = "(14) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S21_to_S11 \" ) "];
start -> S16 [ label = "(15) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S22_to_S16 \" ) "];
start -> S11 [ label = "(16) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S22_to_S11 \" ) "];
start -> S18 [ label = "(17) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S23_to_S18 \" ) "];
start -> S11 [ label = "(18) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S23_to_S11 \" ) "];
start -> start [ label = "(19) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" main_to_start \" ) "];
S10 -> S11 [ label = "(1) evt_authenticate_cH\\authenticated "];
S10 -> bad [ label = "(2) evt_anySymbol_cH\\authenticated && needs "];
S13 -> bad [ label = "(1) evt_anySymbol_cH\\authenticated && needs "];
S12 -> S21 [ label = "(1) evt_user_cH"];
S12 -> bad [ label = "(2) evt_anySymbol_cH\\authenticated && needs "];
S15 -> S22 [ label = "(1) evt_pass_cH"];
S15 -> bad [ label = "(2) evt_anySymbol_cH\\authenticated && needs "];
S17 -> S23 [ label = "(1) evt_createDataSocket_cH"];
S17 -> bad [ label = "(2) evt_anySymbol_cH\\authenticated && needs "];
S16 -> bad [ label = "(1) evt_anySymbol_cH\\authenticated && needs "];
S19 -> bad [ label = "(1) evt_anySymbol_cH\\authenticated && needs "];
S18 -> bad [ label = "(1) evt_anySymbol_cH\\authenticated && needs "];
S0 -> S1 [ label = "(1) evt_onConnected_cH"];
S0 -> bad [ label = "(2) evt_anySymbol_cH\\authenticated && needs "];
S1 -> S2 [ label = "(1) evt_needUser_cH\\needs "];
S1 -> bad [ label = "(2) evt_anySymbol_cH\\authenticated && needs "];
S2 -> S3 [ label = "(1) evt_user_cH"];
S2 -> bad [ label = "(2) evt_anySymbol_cH\\authenticated && needs "];
}