digraph _logic_property {
rankdir=LR;
node [shape = circle]; S0 S1 S3 S4 S6 S7 S9 S10 S11 S12 S2 S5 S8 bad good start;
node [shape = point]; _s_s;
_s_s -> start;
S3 -> bad [ label = "(1) evt_stat_cH"];
S3 -> good [ label = "(2) evt_anySymbol_cH\\authenticated "];
S4 -> good [ label = "(1) evt_anySymbol_cH\\authenticated "];
S11 -> bad [ label = "(1) evt_port_cH"];
S11 -> good [ label = "(2) evt_anySymbol_cH\\authenticated "];
S6 -> bad [ label = "(1) evt_mode_cH"];
S6 -> good [ label = "(2) evt_anySymbol_cH\\authenticated "];
S10 -> good [ label = "(1) evt_anySymbol_cH\\authenticated "];
S7 -> good [ label = "(1) evt_anySymbol_cH\\authenticated "];
S12 -> good [ label = "(1) evt_anySymbol_cH\\authenticated "];
S9 -> bad [ label = "(1) evt_pasv_cH"];
S9 -> good [ label = "(2) evt_anySymbol_cH\\authenticated "];
start -> S0 [ label = "(1) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" start_to_S0 \" ) "];
start -> S2 [ label = "(2) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" start_to_S2 \" ) "];
start -> S3 [ label = "(3) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S2_to_S3 \" ) "];
start -> S5 [ label = "(4) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S2_to_S5 \" ) "];
start -> S6 [ label = "(5) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S5_to_S6 \" ) "];
start -> S8 [ label = "(6) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S5_to_S8 \" ) "];
start -> S9 [ label = "(7) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S8_to_S9 \" ) "];
start -> S11 [ label = "(8) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S8_to_S11 \" ) "];
start -> start [ label = "(9) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" main_to_start \" ) "];
S0 -> bad [ label = "(1) evt_syst_cH"];
S0 -> good [ label = "(2) evt_anySymbol_cH\\authenticated "];
S1 -> good [ label = "(1) evt_anySymbol_cH\\authenticated "];
}