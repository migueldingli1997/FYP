digraph _logic_property {
rankdir=LR;
node [shape = circle]; S0 S2 S3 S4 S5 S6 S7 S8 S10 S11 S1 S9 S12 S13 S14 S15 S16 S17 bad good start;
node [shape = point]; _s_s;
_s_s -> start;
S3 -> S4 [ label = "(1) evt_cds_cH"];
S3 -> good [ label = "(2) evt_anySymbol_cH\\authenticated "];
S4 -> S5 [ label = "(1) evt_cds_cH"];
S4 -> good [ label = "(2) evt_anySymbol_cH\\authenticated "];
S5 -> S6 [ label = "(1) evt_cds_cH"];
S5 -> good [ label = "(2) evt_anySymbol_cH\\authenticated "];
S11 -> good [ label = "(1) evt_anySymbol_cH\\authenticated "];
S6 -> S7 [ label = "(1) evt_cds_cH"];
S6 -> good [ label = "(2) evt_anySymbol_cH\\authenticated "];
S10 -> bad [ label = "(1) evt_onConnected_cH\\clock_0 . current ( ) >= 3600 "];
S10 -> bad [ label = "(2) evt_auth_cH\\authenticated && clock_0 . current ( ) >= 3600 "];
S10 -> bad [ label = "(3) evt_user_cH\\clock_0 . current ( ) >= 3600 "];
S10 -> bad [ label = "(4) evt_pass_cH\\clock_0 . current ( ) >= 3600 "];
S10 -> bad [ label = "(5) evt_cds_cH\\clock_0 . current ( ) >= 3600 "];
S10 -> good [ label = "(6) evt_anySymbol_cH\\authenticated "];
S7 -> bad [ label = "(1) evt_cds_cH"];
S7 -> good [ label = "(2) evt_anySymbol_cH\\authenticated "];
S8 -> good [ label = "(1) evt_anySymbol_cH\\authenticated "];
S9 -> S12 [ label = "(1) evt_onDisconnected_cH"];
S9 -> S13 [ label = "(2) evt_user_cH"];
S9 -> S14 [ label = "(3) evt_cds_cH"];
S9 -> S15 [ label = "(4) evt_onConnected_cH"];
S9 -> S16 [ label = "(5) evt_auth_cH\\authenticated "];
S9 -> S17 [ label = "(6) evt_pass_cH"];
S9 -> good [ label = "(7) evt_anySymbol_cH\\authenticated "];
start -> S0 [ label = "(1) evt_onConnected_cH"];
start -> S2 [ label = "(2) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S1_to_S2 \" ) "];
start -> S9 [ label = "(3) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S1_to_S9 \" ) "];
start -> S10 [ label = "(4) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S9_to_S10 \" ) "];
start -> S9 [ label = "(5) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S12_to_S9 \" ) "];
start -> S10 [ label = "(6) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S12_to_S10 \" ) "];
start -> S9 [ label = "(7) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S13_to_S9 \" ) "];
start -> S10 [ label = "(8) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S13_to_S10 \" ) "];
start -> S9 [ label = "(9) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S14_to_S9 \" ) "];
start -> S10 [ label = "(10) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S14_to_S10 \" ) "];
start -> S9 [ label = "(11) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S15_to_S9 \" ) "];
start -> S10 [ label = "(12) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S15_to_S10 \" ) "];
start -> S9 [ label = "(13) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S16_to_S9 \" ) "];
start -> S10 [ label = "(14) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S16_to_S10 \" ) "];
start -> S9 [ label = "(15) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S17_to_S9 \" ) "];
start -> S10 [ label = "(16) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" S17_to_S10 \" ) "];
start -> start [ label = "(17) evt_channelStateSkip\\ss . getDestination ( ) . equals ( \" main_to_start \" ) "];
start -> good [ label = "(18) evt_anySymbol_cH\\authenticated "];
S0 -> S1 [ label = "(1) evt_auth_cH\\authenticated "];
S0 -> good [ label = "(2) evt_anySymbol_cH\\authenticated "];
S2 -> S3 [ label = "(1) evt_cds_cH"];
S2 -> good [ label = "(2) evt_anySymbol_cH\\authenticated "];
}