IMPORTS{
    import java.util.*;
    import larvaTools.LarvaController;
    import larvaTools.RE.RegExpHolder;
    import RE.lib.basic.Symbol;
    import transactionsystem.UserAccount;
}

GLOBAL{

    VARIABLES{
        int exprIndex = RegExpHolder.parseAndStore("typedef ua : transactionsystem.UserAccount; [p] deposit(ua); {withdraw(ua)}");
        Symbol Sym_deposit_ua = new Symbol("deposit", Arrays.asList("ua"));
        Symbol Sym_withdraw_ua = new Symbol("withdraw", Arrays.asList("ua"));
    }

    EVENTS{ 
        timeout_isE(int id) = { RegExpHolder r.triggerTimeout_isEmpty() } where { id = r.getId(); }
        evt_LarvaReset() = { LarvaController *.triggerReset() }
        evt_LarvaStop() = { LarvaController *.triggerStop() }
    }

    FOREACH(UserAccount _ua){

        VARIABLES{
            RegExpHolder reh = null;
            int currentState = 0;
        }

        EVENTS{ 
            evt_deposit_ua() = { UserAccount ua.deposit() } where { _ua = ua; }
            evt_withdraw_ua() = { UserAccount ua.withdraw() } where { _ua = ua; }
        }

        PROPERTY property{

            STATES{
                BAD{ bad{ currentState = -1; }}
                NORMAL { stopped }
                STARTING{ start{ currentState = 0; reh = new RegExpHolder(exprIndex); }}
            }

            TRANSITIONS{
                start -> bad [ timeout_isE \reh.getId()==id \reh.stop(); ]
                start -> bad [ evt_deposit_ua \reh.toDerivative(Sym_deposit_ua).isEmpty() \reh.stop(); ]
                start -> bad [ evt_withdraw_ua \reh.toDerivative(Sym_withdraw_ua).isEmpty() \reh.stop(); ]
                stopped -> start [ evt_LarvaReset ]
                start -> stopped [ evt_LarvaStop \\reh.stop(); ]
                bad -> stopped [ evt_LarvaStop \\reh.stop(); ]
            }
        }
    }
}
