IMPORTS{
    import java.util.*;
    import larvaTools.LarvaController;
    import larvaTools.RE.RegExpHolder;
    import RE.lib.basic.Symbol;
}

GLOBAL{

    VARIABLES{
        int exprIndex = RegExpHolder.parseAndStore("[p] ADMIN_initialise + ADMIN_reconcile; {ADMIN_createUser}");
        Symbol Sym_ADMIN_initialise = new Symbol("ADMIN_initialise");
        Symbol Sym_ADMIN_reconcile = new Symbol("ADMIN_reconcile");
        Symbol Sym_ADMIN_createUser = new Symbol("ADMIN_createUser");

        RegExpHolder reh = null;
        int currentState = 0;
    }

    EVENTS{ 
        evt_ADMIN_initialise() = { *.ADMIN_initialise() }
        evt_ADMIN_reconcile() = { *.ADMIN_reconcile() }
        evt_ADMIN_createUser() = { *.ADMIN_createUser() }
        timeout_isE(int id) = { RegExpHolder r.triggerTimeout_isEmpty() } where { id = r.getId(); }
        evt_LarvaReset() = { LarvaController *.triggerReset() }
        evt_LarvaStop() = { LarvaController *.triggerStop() }
    }

    PROPERTY property{

        STATES{
            BAD{ bad{ currentState = -1; }}
            NORMAL { stopped }
            STARTING{ start{ currentState = 0; reh = new RegExpHolder(exprIndex); }}
        }

        TRANSITIONS{
            start -> bad [ timeout_isE \reh.getId()==id \reh.stop(); ]
            start -> bad [ evt_ADMIN_initialise \reh.toDerivative(Sym_ADMIN_initialise).isEmpty() \reh.stop(); ]
            start -> bad [ evt_ADMIN_reconcile \reh.toDerivative(Sym_ADMIN_reconcile).isEmpty() \reh.stop(); ]
            start -> bad [ evt_ADMIN_createUser \reh.toDerivative(Sym_ADMIN_createUser).isEmpty() \reh.stop(); ]
            stopped -> start [ evt_LarvaReset ]
            start -> stopped [ evt_LarvaStop \\reh.stop(); ]
            bad -> stopped [ evt_LarvaStop \\reh.stop(); ]
        }
    }
}
